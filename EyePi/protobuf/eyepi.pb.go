// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eyepi.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	eyepi.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	ImageRequest
	ImageResponse
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Defines the request type for the `HelloProxy` method.
type HelloRequest struct {
	HelloText string `protobuf:"bytes,1,opt,name=hello_text,json=helloText" json:"hello_text,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetHelloText() string {
	if m != nil {
		return m.HelloText
	}
	return ""
}

// Defines the response type for the `HelloProxy` method.
type HelloResponse struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ImageRequest struct {
	ImageName string `protobuf:"bytes,1,opt,name=ImageName" json:"ImageName,omitempty"`
	Image     []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *ImageRequest) Reset()                    { *m = ImageRequest{} }
func (m *ImageRequest) String() string            { return proto.CompactTextString(m) }
func (*ImageRequest) ProtoMessage()               {}
func (*ImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ImageRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *ImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type ImageResponse struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *ImageResponse) Reset()                    { *m = ImageResponse{} }
func (m *ImageResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageResponse) ProtoMessage()               {}
func (*ImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ImageResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "protobuf.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "protobuf.HelloResponse")
	proto.RegisterType((*ImageRequest)(nil), "protobuf.ImageRequest")
	proto.RegisterType((*ImageResponse)(nil), "protobuf.ImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EyePi service

type EyePiClient interface {
	// HelloProxy says 'hello' in a form that is handled by the gateway proxy.
	HelloProxy(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	AcceptImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type eyePiClient struct {
	cc *grpc.ClientConn
}

func NewEyePiClient(cc *grpc.ClientConn) EyePiClient {
	return &eyePiClient{cc}
}

func (c *eyePiClient) HelloProxy(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/protobuf.EyePi/HelloProxy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eyePiClient) AcceptImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := grpc.Invoke(ctx, "/protobuf.EyePi/AcceptImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EyePi service

type EyePiServer interface {
	// HelloProxy says 'hello' in a form that is handled by the gateway proxy.
	HelloProxy(context.Context, *HelloRequest) (*HelloResponse, error)
	AcceptImage(context.Context, *ImageRequest) (*ImageResponse, error)
}

func RegisterEyePiServer(s *grpc.Server, srv EyePiServer) {
	s.RegisterService(&_EyePi_serviceDesc, srv)
}

func _EyePi_HelloProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EyePiServer).HelloProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.EyePi/HelloProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EyePiServer).HelloProxy(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EyePi_AcceptImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EyePiServer).AcceptImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.EyePi/AcceptImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EyePiServer).AcceptImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EyePi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.EyePi",
	HandlerType: (*EyePiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloProxy",
			Handler:    _EyePi_HelloProxy_Handler,
		},
		{
			MethodName: "AcceptImage",
			Handler:    _EyePi_AcceptImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eyepi.proto",
}

func init() { proto.RegisterFile("eyepi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x41, 0x4a, 0xc3, 0x40,
	0x18, 0x85, 0x49, 0xb1, 0xc5, 0xfc, 0x89, 0x0b, 0x07, 0xb5, 0xa5, 0xb4, 0x50, 0xc6, 0x4d, 0x11,
	0xcc, 0x80, 0xee, 0xdc, 0x29, 0x08, 0xba, 0x91, 0x1a, 0x5c, 0x0a, 0x92, 0x86, 0xdf, 0x38, 0x90,
	0x66, 0xc6, 0xcc, 0x54, 0x92, 0xad, 0x57, 0xf0, 0x32, 0xde, 0xc3, 0x2b, 0x78, 0x10, 0xc9, 0x9f,
	0x46, 0x46, 0xa4, 0xab, 0x99, 0xf7, 0x78, 0x7c, 0xff, 0x7b, 0x10, 0x60, 0x8d, 0x5a, 0x46, 0xba,
	0x54, 0x56, 0xb1, 0x5d, 0x7a, 0x96, 0xeb, 0xe7, 0xf1, 0x24, 0x53, 0x2a, 0xcb, 0x51, 0x24, 0x5a,
	0x8a, 0xa4, 0x28, 0x94, 0x4d, 0xac, 0x54, 0x85, 0x69, 0x73, 0xfc, 0x14, 0xc2, 0x1b, 0xcc, 0x73,
	0x15, 0xe3, 0xeb, 0x1a, 0x8d, 0x65, 0x53, 0x80, 0x97, 0x46, 0x3f, 0x59, 0xac, 0xec, 0xc8, 0x9b,
	0x79, 0x73, 0x3f, 0xf6, 0xc9, 0x79, 0xc0, 0xca, 0xf2, 0x63, 0xd8, 0xdb, 0xc4, 0x8d, 0x56, 0x85,
	0x41, 0xc6, 0x60, 0xc7, 0x49, 0xd2, 0x9f, 0x5f, 0x41, 0x78, 0xbb, 0x4a, 0x32, 0xec, 0x98, 0x13,
	0xf0, 0x49, 0xdf, 0x25, 0x2b, 0xec, 0x90, 0xbf, 0x06, 0x3b, 0x80, 0xbe, 0x6c, 0xc4, 0xa8, 0x37,
	0xf3, 0xe6, 0x61, 0xdc, 0x8a, 0xe6, 0xd0, 0x86, 0xb1, 0xfd, 0xd0, 0xd9, 0xa7, 0x07, 0xfd, 0xeb,
	0x1a, 0x17, 0x92, 0x3d, 0x02, 0x50, 0xaf, 0x45, 0xa9, 0xaa, 0x9a, 0x1d, 0x45, 0xdd, 0xfa, 0xc8,
	0x1d, 0x37, 0x1e, 0xfe, 0xf3, 0x5b, 0x38, 0x9f, 0xbe, 0x7f, 0x7d, 0x7f, 0xf4, 0x86, 0xec, 0x50,
	0x10, 0x4e, 0x18, 0x2c, 0xdf, 0x64, 0x8a, 0x46, 0xd0, 0x72, 0x76, 0x0f, 0xc1, 0x65, 0x9a, 0xa2,
	0xb6, 0x54, 0xc9, 0xc5, 0xbb, 0x3b, 0x5d, 0xfc, 0x9f, 0xee, 0x7c, 0x9f, 0xf0, 0x01, 0x1f, 0x08,
	0x1a, 0x77, 0xe1, 0x9d, 0x2c, 0x07, 0x14, 0x3d, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xde,
	0x8b, 0xed, 0xb5, 0x01, 0x00, 0x00,
}
